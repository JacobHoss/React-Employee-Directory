{"version":3,"sources":["utils/API.js","components/Table/index.js","components/Search/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","DataTable","data","columns","name","displayName","cellPadding","cellSpacing","className","map","col","idx","key","row","column","colName","colObj","src","medium","first","last","date","slice","split","placeColumn","Search","useState","employee","setEmployee","filteredEmployee","setFilteredEmployee","query","setQuery","useEffect","API","then","res","results","catch","err","console","log","type","placeholder","value","onChange","e","target","Object","keys","filter","some","toString","toLowerCase","indexOf","searchFilter","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e21bbbab.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n// Export an object containing methods we'll use for accessing the Dog.Ceo API\r\n\r\nexport default {\r\n  getEmployeeList: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=100&inc=name,phone,email,dob,picture&nat=us&noinfo\")\r\n  }\r\n};","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction DataTable({ data }) {\r\n\r\n    const columns = [\r\n        {\r\n            name: \"picture\",\r\n            displayName: \"Profile Picture\"\r\n        },\r\n        {\r\n            name: \"name\",\r\n            displayName: \"Employee Name\"\r\n        },\r\n        {\r\n            name: \"dob\",\r\n            displayName: \"Date of Birth\"\r\n        },\r\n        {\r\n            name: \"email\",\r\n            displayName: \"Email\"\r\n        },\r\n        {\r\n            name: \"phone\",\r\n            displayName: \"Phone Number\"\r\n        }\r\n    ];\r\n\r\n    function placeColumn(colName, colObj, idx) {\r\n        switch (colName) {\r\n            case \"picture\":\r\n                return <td key={idx}>\r\n                    <img src={colObj[colName].medium} />\r\n                </td>\r\n            case \"name\":\r\n                return <td key={idx}>{`${colObj[colName].first} ${colObj[colName].last}`}</td>\r\n            case \"phone\":\r\n            case \"email\":\r\n                return <td key={idx}>{colObj[colName]}</td>\r\n            case \"dob\":\r\n                return <td key={idx}>{colObj[colName].date.slice(0,10).split(\"-\")[1] + \"-\" + colObj[colName].date.slice(0,10).split(\"-\")[2] + \"-\" + colObj[colName].date.slice(0,10).split(\"-\")[0] }</td>\r\n            default:\r\n                return <td></td>\r\n        }\r\n    }\r\n    return (\r\n        <table cellPadding={10} cellSpacing={0} className=\"mx-auto w-auto table-striped table-bordered table-responsive-sm\">\r\n            <thead className=\"bg-success\">\r\n                <tr>{data[0] && columns.map((col, idx) => <th key={idx}>{col.displayName}</th>)}</tr>\r\n            </thead>\r\n            <tbody className=\"bg-info\">\r\n                {data[0].map((row, idx) => (\r\n                    <tr key={idx}>\r\n                        {columns.map((column, idx) => placeColumn(column.name, row, idx))}\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default DataTable;","import React, { useEffect, useState } from 'react';\r\nimport API from '../../utils/API';\r\nimport \"./style.css\";\r\nimport DataTable from '../Table'\r\n\r\nfunction Search() {\r\n  const [employee, setEmployee] = useState([]);\r\n  const [filteredEmployee, setFilteredEmployee] = useState([]);\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n      API.getEmployeeList().then(res => {\r\n        setEmployee(res.data.results);\r\n        setFilteredEmployee(res.data.results);\r\n      }).catch(err => console.log(err));\r\n    }, []);\r\n\r\n    function searchFilter(query) {\r\n      const columns = employee[0] && Object.keys(employee[0])\r\n      return employee.filter(row =>\r\n        columns.some(column => row[column].toString().toLowerCase().indexOf(query) > -1)\r\n        )\r\n    }\r\n\r\n  return (\r\n    <>\r\n    <div className=\"mb-3 mt-0\">\r\n      <input\r\n        className=\"form-control\"\r\n        type=\"text\"\r\n        placeholder=\"Search\"\r\n        value={query}\r\n        onChange={(e) => {\r\n          setQuery(e.target.value);\r\n          if (e.target.value === \"\") {\r\n            setFilteredEmployee(employee)\r\n          } else {\r\n            setFilteredEmployee(searchFilter(e.target.value))\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n    <DataTable data={[filteredEmployee]} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nfunction Header() {\r\n    return (\r\n<div className=\"jumbotron jumbotron-fluid\">\r\n  <div className=\"container\">\r\n    <h1 className=\"display-4\">Employee Directory</h1>\r\n    <p className=\"lead\">This is my first React App.</p>\r\n  </div>\r\n</div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport Search from './components/Search'\nimport Header from './components/Header'\n\nfunction App() {\n  return (\n    <div className=\"container bg-secondary pb-4\">\n      <Header />\n      <Search />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}